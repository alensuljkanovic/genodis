/*
    Description of module.
*/


Module:
    content*=ModuleContent
;

ModuleContent:
    imports+=Import | classes+=Class | actions+=Action | bindings+=Binding
;

Import:
    module=ImportModule | selective=SelectiveImport
;

ImportModule:
    'import' modules+=ID[',']
;

SelectiveImport:
    'from' from_module=ID 'import' selector=ImportSelector
;

ImportSelector:
    value='*' | value+=ID[',']
;


Class:
    'class' name=ID '{'
        // shows if class should be persisted
        (session="session")?
        properties+=Property
        actions*=Action
        bindings*=Binding
    '}'
;

// TODO: Add label.
Property:
    name=ID ':' type=[PropertyType] (list="list")? ('(' arguments*=PropertyArgument[','] ')')?
;

PropertyType:
    "string" | "text" | "int" | "float" | "decimal"| "datetime" | "date" | "choice" | "calculated_field" | Class
;

PropertyArgument:
    (unique?="unique" ("=" unique_value=BOOL)?) |
    (readonly?="readonly" ("=" readonly_value=BOOL)?) |
    (required?="required" ("=" required_value=BOOL)?) |
    (min_length?="min_length" "=" min_length_value=INT) |
    (max_length?="max_length" "=" max_length_value=INT) |
    (choices?="choices" "=" choices_value+=ChoicesValue[',']) |
    (calc?="calc" "=" calc_value+=CalculationValue) |
    (max_digits?="max_digits" "=" max_digits_value=INT) |
    (decimal_places?="decimal_places" "=" decimal_places_value=INT)
;

ChoicesValue:
    key=ID ":" name=STRING
;

CalculationValue:
    first_operand=ID other_operands*=CalculationOperands
;

CalculationOperands:
    operator=CalcOperator operand=ID
;

CalcOperator:
    "." | "+" | "-" | "/" | "*"
;

Action:
    '#' name=ID '(' expression=ActionExpression ')'
;

// FIXME: Rules below should be reimplemented.
ActionExpression:
    first_operand=First operator=ActionOperator second_operand=Expression
;

First:
    "this" | ID
;

Second:
    BASETYPE | ID | Expression
;

Expression:
    ExpressionFirstPart | ID
;

ExpressionFirstPart:
    first_operand=ComplexName rest*=ExpressionRest
;

ComplexName:
    /*[Class] '.' ID | [Class] '.' 'object' '.' ID | ID '.' 'object' '.' ID*/
    name=ID ('.' ID)*
;

ExpressionRest:
    operator=ExpressionOperator name=ComplexName
;

ExpressionSecondPart:
    operator=ExpressionOperator second_operand=ComplexName
;

ActionOperator:
    "-> add" | "-> del" | "->" | "="
;

ExpressionOperator:
     "+=" | "-=" | "*=" | "/="| "*" | "/" | "+" | "-"
;

// TODO: See if I really need binding as a special rule. In the end, it's just
// a special type of Action.
Binding:
    '#bind' '(' parameters*=BindingParameters[','] ')' '{'
        code=BindingCode
    '}'
;

BindingParameters:
    name=ID ('.' ID)*
;

BindingCode:
    /^(.|\n)*?(?=})/
;

// Special rule for comments
Comment:
  /\/\/.*$/|/\/\*(.|\n)*?\*\//  // Non-greedy match of block component content
;